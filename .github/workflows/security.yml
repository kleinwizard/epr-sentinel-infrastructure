name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  frontend-security:
    name: Frontend Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run npm audit
      working-directory: frontend
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json || true
        npm audit --audit-level=moderate || true
    
    - name: Upload npm audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: npm-audit-results
        path: frontend/npm-audit.json

  backend-security:
    name: Backend Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      working-directory: backend
      run: poetry install
    
    - name: Run pip-audit
      working-directory: backend
      run: |
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        pip install pip-audit
        pip-audit -r requirements.txt --format=json --output=pip-audit.json || true
        pip-audit -r requirements.txt || true
    
    - name: Run Bandit security scan
      working-directory: backend
      run: |
        poetry run bandit -r . -f json -o bandit.json || true
        poetry run bandit -r . || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-security-results
        path: |
          backend/pip-audit.json
          backend/bandit.json

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
