version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: epr-postgres
    environment:
      POSTGRES_DB: epr_copilot
      POSTGRES_USER: epr_user
      POSTGRES_PASSWORD: epr_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U epr_user -d epr_copilot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: epr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: epr-backend
    ports:
      - "8001:8001"
    environment:
      - SECRET_KEY=dev-secret-key-change-in-production
      - DATABASE_URL=postgresql://epr_user:epr_password@postgres:5432/epr_copilot
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - DEBUG=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/epr_backend:/app
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: epr-celery-worker
    command: celery -A app.services.background_jobs worker --loglevel=info
    environment:
      - SECRET_KEY=dev-secret-key-change-in-production
      - DATABASE_URL=postgresql://epr_user:epr_password@postgres:5432/epr_copilot
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/epr_backend:/app
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: epr-frontend
    ports:
      - "8080:8080"
    environment:
      - VITE_API_BASE_URL=http://localhost:8001
    depends_on:
      - backend
    restart: unless-stopped

  # Development Frontend (for hot reload)
  frontend-dev:
    image: node:20-alpine
    container_name: epr-frontend-dev
    working_dir: /app
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:8001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0 --port 3000"
    depends_on:
      - backend
    profiles:
      - dev

volumes:
  postgres_data:
  redis_data:
